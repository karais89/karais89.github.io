"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2674],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,g=c["".concat(s,".").concat(d)]||c[d]||p[d]||i;return n?a.createElement(g,l(l({ref:t},m),{},{components:n})):a.createElement(g,l({ref:t},m))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const i={title:"[Codewars #44] Domain name validator (5kyu)",authors:["karais89"],tags:["codewars","kata"]},l=void 0,o={permalink:"/2019/01/23/codewars-Domain-name-validator",editUrl:"https://github.com/karais89/karais89.github.io/tree/main/my-website/blog/2019-01-23-codewars-Domain-name-validator/index.md",source:"@site/blog/2019-01-23-codewars-Domain-name-validator/index.md",title:"[Codewars #44] Domain name validator (5kyu)",description:"Instructions",date:"2019-01-23T00:00:00.000Z",formattedDate:"2019\ub144 1\uc6d4 23\uc77c",tags:[{label:"codewars",permalink:"/tags/codewars"},{label:"kata",permalink:"/tags/kata"}],readingTime:4.815,hasTruncateMarker:!1,authors:[{name:"karais89",title:"Game Developer",url:"https://github.com/karais89",imageURL:"https://github.com/karais89.png",key:"karais89"}],frontMatter:{title:"[Codewars #44] Domain name validator (5kyu)",authors:["karais89"],tags:["codewars","kata"]},prevItem:{title:"[Codewars #49] Take a Ten Minute Walk (6kyu)",permalink:"/2019/01/24/codewars-Take-a-Ten-Minute-Walk"},nextItem:{title:"[Codewars #43] Integer triangles (5kyu)",permalink:"/2019/01/23/codewars-Integer triangles"}},s={authorsImageUrls:[void 0]},u=[{value:"Instructions",id:"instructions",level:2},{value:"My Solution",id:"my-solution",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"g0dm0d3&#39;s Solution",id:"g0dm0d3s-solution",level:2}],m={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"instructions"},"Instructions"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.codewars.com/kata/5893933e1a88084be10001a3/train/csharp"},"\ub9c1\ud06c")),(0,r.kt)("p",null,"In this kata you have to create a domain name validator mostly compliant with RFC 1035, RFC 1123, and RFC 2181"),(0,r.kt)("p",null,"For purposes of this kata, following rules apply:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Domain name may contain subdomains (levels), hierarchically separated by . (period) character"),(0,r.kt)("li",{parentName:"ul"},"Domain name must not contain more than 127 levels, including top level (TLD)"),(0,r.kt)("li",{parentName:"ul"},"Domain name must not be longer than 253 characters (RFC specifies 255, but 2 characters are reserved for trailing dot and null character for root level)"),(0,r.kt)("li",{parentName:"ul"},"Level names must be composed out of lowercase and uppercase ASCII letters, digits and - (minus sign) character"),(0,r.kt)("li",{parentName:"ul"},"Level names must not start or end with - (minus sign) character"),(0,r.kt)("li",{parentName:"ul"},"Level names must not be longer than 63 characters"),(0,r.kt)("li",{parentName:"ul"},"Top level (TLD) must not be fully numerical")),(0,r.kt)("p",null,"Additionally, in this kata"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Domain name must contain at least one subdomain (level) apart from TLD"),(0,r.kt)("li",{parentName:"ul"},"Top level validation must be naive - ie. TLDs nonexistent in IANA register are still considered valid as long as they adhere to the rules given above.\nThe validation function accepts string with the full domain name and returns boolean value indicating whether the domain name is valid or not.")),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"validate('codewars') == False\nvalidate('g.co') == True\nvalidate('codewars.com') == True\nvalidate('CODEWARS.COM') == True\nvalidate('sub.codewars.com') == True\nvalidate('codewars.com-') == False\nvalidate('.codewars.com') == False\nvalidate('example@codewars.com') == False\nvalidate('127.0.0.1') == False\n")),(0,r.kt)("h2",{id:"my-solution"},"My Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Text.RegularExpressions;\npublic class DomainNameValidator {\n  public bool validate(string domain) {\n    Console.WriteLine(domain);\n    // Domain name must not be longer than 253 characters (RFC specifies 255, but 2 characters are reserved for trailing dot and null character for root level)\n    if (domain.Length > 253)\n    {\n      return false;\n    }\n    string[] domainSplitDots = domain.Split(".");\n    // Domain name must contain at least one subdomain (level) apart from TLD\n    if (domainSplitDots.Length <= 1)\n    {\n      return false;\n    }\n    // all integer check\n    bool isAllInteger = true;\n    for (int i = 0; i < domainSplitDots.Length; i++)\n    {\n      string str = domainSplitDots[i];\n      int domainInteger = 0;\n      if (!int.TryParse(str, out domainInteger))\n      {\n         isAllInteger = false;\n      }\n    }\n    for (int i = 0; i < domainSplitDots.Length; i++)\n    {\n      string str = domainSplitDots[i];\n      int domainInteger = 0;\n      if (isAllInteger && int.TryParse(str, out domainInteger))\n      {\n        // Domain name must not contain more than 127 levels, including top level (TLD)\n        if (domainInteger >= 127)\n        {\n          return false;\n        }\n      }\n      else\n      {\n        // Level names must not be longer than 63 characters\n        if (str.Length > 63)\n        {\n          return false;\n        }\n        // Level names must be composed out of lowercase and uppercase ASCII letters, digits and - (minus sign) character\n        // https://stackoverflow.com/questions/1181419/verifying-that-a-string-contains-only-letters-in-c-sharp\n        bool isMatch = Regex.IsMatch(str, @"^[a-zA-Z0-9-]+$");\n        if (!isMatch)\n        {\n          Console.WriteLine(str);\n          return false;\n        }\n        // Level names must not start or end with - (minus sign) character\n        if (str.StartsWith("-") || str.EndsWith("-"))\n        {\n          Console.WriteLine(str);\n          return false;\n        }\n      }\n    }\n    // where is rules??\n    if (!isAllInteger)\n    {\n      string str = domainSplitDots[domainSplitDots.Length-1];\n      int ret = 0;\n      if (int.TryParse(str, out ret))\n      {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ub3c4\uba54\uc778 \uc774\ub984 \uaddc\uce59",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\uc810(.) \uae30\ud638\ub85c \ub3c4\uba54\uc778\uc774 \uad6c\ubd84\ub41c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub808\ubca8\uc740 127 \uc774\uc0c1\uc744 \ud3ec\ud568\ud560 \uc218 \uc5c6\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub3c4\uba54\uc778 \uc774\ub984\uc740 253 \uae00\uc790\ubcf4\ub2e4 \ubc18\ub4dc\uc2dc \uc791\uc544\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub808\ubca8 \uc774\ub984\uc740 \uc18c\ubb38\uc790, \ub300\ubb38\uc790, \uc544\uc2a4\ud0a4 \ubb38\uc790, \uc22b\uc790 \ubc0f \ub300\uc26c(-) \ubb38\uc790\ub85c \uad6c\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub808\ubca8 \uc774\ub984\uc740 \ub300\uc26c(-)\ub85c \uc2dc\uc791\ud558\uac70\ub098 \ub05d\ub0a0 \uc218 \uc5c6\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub808\ubca8 \uc774\ub984\uc740 63 \uae00\uc790\ub97c \ucd08\uacfc\ud560 \uc218 \uc5c6\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ucd5c\uc0c1\uc704 \ub808\ubca8\uc740 \uc644\uc804\ud788 \uc22b\uc790\uc5ec\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub3c4\uba54\uc778 \uc774\ub984\uc740 TLD\ub97c \uc81c\uc678\ud55c \ud558\ub098 \uc774\uc0c1\uc758 \ud558\uc704 \ub3c4\uba54\uc778\uc774 \ud3ec\ud568\ub418\uc5b4\uc57c \ud55c\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ucd5c\uc0c1\uc704 \uc720\ud6a8\uc131 \uac80\uc0ac\ub294 \uc21c\uc9c4\ud574\uc57c\ud569\ub2c8\ub2e4. \uc989. IANA \ub4f1\ub85d\ubd80\uc5d0 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 TLD\ub294 \uc704\uc5d0 \uc8fc\uc5b4\uc9c4 \uaddc\uce59\uc744 \uc900\uc218\ud558\ub294 \ud55c \uc720\ud6a8\ud55c \uac83\uc73c\ub85c \uac04\uc8fc\ub429\ub2c8\ub2e4."))),(0,r.kt)("li",{parentName:"ul"},"\ubb38\uc81c\ub97c \uc798\ubabb \uc774\ud574\ud574\uc11c \uc798\ubabb \ud47c \ubd80\ubd84\uc774 \uc788\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"127 leves \ubd80\ubd84\uc744 \uc798\ubabb \uc774\ud574 \ud588\uc74c.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\uc815\uaddc \ud45c\ud604\uc2dd\uc740 \ub098\uc911\uc5d0 \ud3ec\uc2a4\ud2b8\ub85c \uc815\ub9ac\ub97c \ud574\uc57c \uaca0\ub2e4.")),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Text.RegularExpressions;\npublic class DomainNameValidator {\n  public bool validate(string domain) {\n    if (domain.Length > 253)\n      return false;\n    Regex re = new Regex(@"^(?!-)[a-z0-9-]{1,63}(?<!-)(?:\\.(?!-)[a-z0-9-]{1,63}(?<!-)){0,125}\\.(?!-)(?![0-9]+$)[a-z0-9-]{1,63}(?<!-)$", RegexOptions.IgnoreCase);\n    Match m = re.Match(domain);\n    return m.Success;\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\uc815\uaddc \ud45c\ud604\uc2dd \uad00\ub828 \ubb38\uc81c\ub97c \ub9ce\uc774 \ud478\ub294 \uac83 \uac19\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\ub3c4\uba54\uc778 \uaddc\uce59\uac19\uc740\uac74 \ud655\uc2e4\ud788 \uc815\uaddc\ud45c\ud604\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub294\uac8c \ub9de\ub2e4.")),(0,r.kt)("h2",{id:"g0dm0d3s-solution"},"g0dm0d3's Solution"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Text.RegularExpressions;\nusing System.Linq;\npublic class DomainNameValidator {\n  public bool validate(string domain) {\n    if (domain.Length < 3 || domain.Length > 253) return false;\n    var levels = domain.Split(\'.\');\n    if (levels.Count() < 2 || levels.Count() > 127) return false;\n    var zone = levels.Last();\n    if (Regex.IsMatch(zone, @"^[0-9]+$")) return false;\n    foreach (var level in levels) {\n      if (level.Length > 63) return false;\n      if (!Regex.IsMatch(level, @"^[a-zA-Z0-9\\-]+$")) return false;\n      if (level.StartsWith("-") || level.EndsWith("-")) return false;\n    }\n    return true;\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\ud45c \uc790\uccb4\ub294 \ubc1b\uc9c0 \ubabb\ud55c \ud574\uacb0\ucc45\uc774\ub2e4."),(0,r.kt)("li",{parentName:"ul"},"\uadf8\ub098\ub9c8 \uac00\uc7a5 \uc774\ud574\ud558\uae30 \uc26c\uc6b4 \ucf54\ub4dc\uc778\uac83 \uac19\uc544\uc11c \uac00\uc838\uc654\ub2e4.")))}p.isMDXComponent=!0}}]);