"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[15046],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88317:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={title:"[Codewars #23] Sum The Tree (6kyu)",authors:["karais89"],tags:["codewars","kata"]},l=void 0,i={permalink:"/2019/01/10/codewars-Sum-The-Tree",editUrl:"https://github.com/karais89/karais89.github.io/tree/main/my-website/blog/2019-01-10-codewars-Sum-The-Tree/index.md",source:"@site/blog/2019-01-10-codewars-Sum-The-Tree/index.md",title:"[Codewars #23] Sum The Tree (6kyu)",description:"Instructions",date:"2019-01-10T00:00:00.000Z",formattedDate:"2019\ub144 1\uc6d4 10\uc77c",tags:[{label:"codewars",permalink:"/tags/codewars"},{label:"kata",permalink:"/tags/kata"}],readingTime:1.925,hasTruncateMarker:!1,authors:[{name:"karais89",title:"Game Developer",url:"https://github.com/karais89",imageURL:"https://github.com/karais89.png",key:"karais89"}],frontMatter:{title:"[Codewars #23] Sum The Tree (6kyu)",authors:["karais89"],tags:["codewars","kata"]},prevItem:{title:"codewars-Alphabet-war-airstrike-letters-massacre",permalink:"/2019/01/10/codewars-Alphabet-war-airstrike-letters-massacre"},nextItem:{title:"[Codewars #21] Parse HTML/CSS Colors (6kyu)",permalink:"/2019/01/09/codewars-Parse-HTML-CSS-Colors"}},u={authorsImageUrls:[void 0]},s=[{value:"Instructions",id:"instructions",level:2},{value:"My Solution",id:"my-solution",level:2},{value:"Best Practices",id:"best-practices",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"instructions"},"Instructions"),(0,o.kt)("p",null,"Given a node object representing a binary tree:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Node:\n  value: <int>,\n  left: <Node> or null,\n  right: <Node> or null\n\nNode:\n  value: <int>,\n  left: <Node> or null,\n  right: <Node> or null\n\nstruct node\n{\n  int value;\n  node* left;\n  node* right;\n}\n\npublic class Node\n{\n    public int Value;\n    public Node Left;\n    public Node Right;\n\n    public Node(int value, Node left = null, Node right = null)\n    {\n      Value = value;\n      Left = left;\n      Right = right;\n    }\n}\n\n")),(0,o.kt)("p",null,"write a function that returns the sum of all values, including the root. Absence of a node will be indicated with a null value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"10\n| \\\n1 2\n=> 13\n\n1\n| \\\n0 0\n    \\\n     2\n=> 3\n")),(0,o.kt)("h2",{id:"my-solution"},"My Solution"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing System.Collections.Generic;\n\npublic static class Kata\n{\n  public static int SumTree(Node root)\n  {\n    return RecusiveTree(root);\n  }\n\n  public static int RecusiveTree(Node root)\n  {\n    if (root == null)\n    {\n      return 0;\n    }\n\n    if (root.Left == null && root.Right == null)\n    {\n      return root.Value;\n    }\n\n    if (root.Left != null && root.Right != null)\n    {\n      return root.Value + RecusiveTree(root.Left) + RecusiveTree(root.Right);\n    }\n    else if (root.Right != null)\n    {\n      return root.Value + RecusiveTree(root.Right);\n    }\n    else if (root.Left != null)\n    {\n      return root.Value + RecusiveTree(root.Left);\n    }\n    return 0;\n  }\n}\n")),(0,o.kt)("p",null,"\uc804\uccb4 \ud2b8\ub9ac\uc758 \ud569 \uad6c\ud558\ub294 \ubb38\uc81c"),(0,o.kt)("p",null,"\ud2b8\ub9ac\uc758 \ud569\uc740 \uc7ac\uadc0 \ud638\ucd9c \ubc16\uc5d0 \uc5c6\ub098?? \ub77c\ub294 \uc0dd\uac01\uc744 \ud558\uba74\uc11c \uc7ac\uadc0 \ud638\ucd9c\uc744 \uc0ac\uc6a9\ud558\uc5ec \uad6c\ud558\uc600\ub2e4.."),(0,o.kt)("h2",{id:"best-practices"},"Best Practices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\n\npublic static class Kata\n{\n  public static int SumTree(Node root)\n  {\n    return root == null ? 0 : root.Value + SumTree(root.Left) + SumTree(root.Right);\n  }\n}\n")),(0,o.kt)("p",null,"\uc7ac\uadc0 \ud638\ucd9c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud574\uacb0 \ud55c\uc904\ub85c \uc9e4 \uc218 \uc788\ub294 \ucf54\ub4dc \uc600\uad6c\ub098.."),(0,o.kt)("p",null,"\uc4f8\ub370 \uc5c6\ub294 \ube44\uad50 \uac80\uc0ac\ubb38\ub4f1\uc744 \uc9d1\uc5b4 \ub123\uc5b4\uc11c, \ucf54\ub4dc\uac00 \uae38\uc5b4 \uc84c\ub2e4. \ubc18\uc131 \ud558\uc790."),(0,o.kt)("p",null,"\uc7ac\uadc0 \ud638\ucd9c\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ud574\uacb0\ud558\ub294 \ubc29\ubc95"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"public static void preTraverseNoRec(Node root){\n    Stack<Node> stack = new Stack<eNode>();\n    stack.push(root);\n    while(stack.size()!=0) {\n        Node node = stack.pop();\n        System.out.println(node.data);\n        if(node.right != null) stack.push(node.right);\n        if(node.left != null) stack.push(node.left);\n    }\n}\n")))}p.isMDXComponent=!0}}]);